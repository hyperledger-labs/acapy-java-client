/*
 * aca-py client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.7.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.hyperledger.acy_py.generated.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.List;

/**
 * SubmissionRequirements
 */

@lombok.Data
@lombok.AllArgsConstructor
@lombok.NoArgsConstructor
@lombok.Builder
public class SubmissionRequirements {
    public static final String SERIALIZED_NAME_COUNT = "count";
    @SerializedName(SERIALIZED_NAME_COUNT)
    private Integer count;
    public static final String SERIALIZED_NAME_FROM = "from";
    @SerializedName(SERIALIZED_NAME_FROM)
    private String from;
    public static final String SERIALIZED_NAME_FROM_NESTED = "from_nested";
    @SerializedName(SERIALIZED_NAME_FROM_NESTED)
    private List<SubmissionRequirements> fromNested = null;
    public static final String SERIALIZED_NAME_MAX = "max";
    @SerializedName(SERIALIZED_NAME_MAX)
    private Integer max;
    public static final String SERIALIZED_NAME_MIN = "min";
    @SerializedName(SERIALIZED_NAME_MIN)
    private Integer min;
    public static final String SERIALIZED_NAME_NAME = "name";
    @SerializedName(SERIALIZED_NAME_NAME)
    private String name;
    public static final String SERIALIZED_NAME_PURPOSE = "purpose";
    @SerializedName(SERIALIZED_NAME_PURPOSE)
    private String purpose;

    /**
     * Selection
     */
    @JsonAdapter(RuleEnum.Adapter.class)
    public enum RuleEnum {
        ALL("all"),

        PICK("pick");

        private String value;

        RuleEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static RuleEnum fromValue(String value) {
            for (RuleEnum b : RuleEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<RuleEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final RuleEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public RuleEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return RuleEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_RULE = "rule";
    @SerializedName(SERIALIZED_NAME_RULE)
    private RuleEnum rule;
}
